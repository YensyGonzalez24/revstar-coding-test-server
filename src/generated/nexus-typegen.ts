/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Company: { // root type
    NIT: string; // ID!
    address: string; // String!
    name: string; // String!
    telephone: string; // String!
  }
  Mutation: {};
  Product: { // root type
    companyId: string; // String!
    id: string; // ID!
    name: string; // String!
    price: string; // String!
  }
  Query: {};
  User: { // root type
    email: string; // String!
    id: string; // ID!
    role: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Company: { // field return type
    NIT: string; // ID!
    address: string; // String!
    name: string; // String!
    products: NexusGenRootTypes['Product'][]; // [Product!]!
    telephone: string; // String!
  }
  Mutation: { // field return type
    createCompany: NexusGenRootTypes['Company'] | null; // Company
    createProduct: NexusGenRootTypes['Product'] | null; // Product
    createUser: NexusGenRootTypes['User'] | null; // User
    deleteCompany: boolean | null; // Boolean
    deleteProduct: boolean | null; // Boolean
    updateCompany: NexusGenRootTypes['Company'] | null; // Company
  }
  Product: { // field return type
    company: NexusGenRootTypes['Company']; // Company!
    companyId: string; // String!
    id: string; // ID!
    name: string; // String!
    price: string; // String!
  }
  Query: { // field return type
    allCompanies: Array<NexusGenRootTypes['Company'] | null> | null; // [Company]
    allProductsFromCompany: Array<NexusGenRootTypes['Product'] | null> | null; // [Product]
    getCompany: NexusGenRootTypes['Company'] | null; // Company
    getUserRole: NexusGenRootTypes['User'] | null; // User
  }
  User: { // field return type
    email: string; // String!
    id: string; // ID!
    role: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Company: { // field return type name
    NIT: 'ID'
    address: 'String'
    name: 'String'
    products: 'Product'
    telephone: 'String'
  }
  Mutation: { // field return type name
    createCompany: 'Company'
    createProduct: 'Product'
    createUser: 'User'
    deleteCompany: 'Boolean'
    deleteProduct: 'Boolean'
    updateCompany: 'Company'
  }
  Product: { // field return type name
    company: 'Company'
    companyId: 'String'
    id: 'ID'
    name: 'String'
    price: 'String'
  }
  Query: { // field return type name
    allCompanies: 'Company'
    allProductsFromCompany: 'Product'
    getCompany: 'Company'
    getUserRole: 'User'
  }
  User: { // field return type name
    email: 'String'
    id: 'ID'
    role: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createCompany: { // args
      NIT: string; // String!
      address: string; // String!
      name: string; // String!
      telephone: string; // String!
    }
    createProduct: { // args
      companyId: string; // String!
      name: string; // String!
      price: string; // String!
    }
    createUser: { // args
      email: string; // String!
      name: string; // String!
      password: string; // String!
    }
    deleteCompany: { // args
      NIT: string; // String!
    }
    deleteProduct: { // args
      id: string; // String!
    }
    updateCompany: { // args
      NIT: string; // String!
      address: string; // String!
      name: string; // String!
      telephone: string; // String!
    }
  }
  Query: {
    allProductsFromCompany: { // args
      NIT: string; // String!
    }
    getCompany: { // args
      NIT: string; // String!
    }
    getUserRole: { // args
      email: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}